# bot_worker.py - Vers√£o Corrigida e Otimizada
import logging
import time
import random
import httpx
from bs4 import BeautifulSoup
from config import (BASE_URL, JOGO_SLUG, DEPENDENTE_ID, TARGET_SECTOR_SLUG,
                    MAX_WATCH_ATTEMPTS, WATCH_INTERVAL_MIN, WATCH_INTERVAL_MAX,
                    HEADERS, DEBUG_HTML_FILE, SETORES_URL, CATEGORIA_URL)
from session_manager import get_authenticated_session

# Configura√ß√£o do logging para este processo
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s | %(levelname)s | %(message)s",
    handlers=[logging.FileHandler("log_reserva_final.txt", encoding="utf-8"),
              logging.StreamHandler()],
)
log = logging.getLogger("bot-worker")

def analyze_and_log_sectors(soup: BeautifulSoup) -> bool:
    """
    Analisa setores de forma otimizada e mostra apenas informa√ß√µes relevantes.
    Retorna True se o setor alvo estiver dispon√≠vel.
    """
    all_sector_elements = soup.find_all(class_="sector")
    
    if not all_sector_elements:
        log.warning("‚ö†Ô∏è Nenhum setor encontrado na p√°gina!")
        return False
    
    log.info("  üìä [AN√ÅLISE DOS SETORES]")
    
    target_found_and_available = False
    available_sectors = []
    unavailable_count = 0
    
    # Analisa todos os setores de forma eficiente
    for sector_element in all_sector_elements:
        sector_slug = sector_element.get('id', 'desconhecido')
        is_disabled = 'disabled' in sector_element.get('class', [])
        
        if sector_slug == TARGET_SECTOR_SLUG:
            # Setor alvo - sempre mostra com destaque
            if not is_disabled:
                log.info(f"  üéØ Setor '{sector_slug.upper()}': ‚úÖ DISPON√çVEL <--- ALVO ENCONTRADO!")
                target_found_and_available = True
            else:
                log.info(f"  üéØ Setor '{sector_slug.upper()}': ‚ùå Indispon√≠vel <--- ALVO")
        elif not is_disabled:
            # Outros setores dispon√≠veis
            available_sectors.append(sector_slug)
        else:
            unavailable_count += 1
    
    # Mostra resumo dos outros setores
    if available_sectors:
        # Mostra apenas os primeiros 5 para n√£o poluir o log
        show_sectors = available_sectors[:5]
        log.info(f"  ‚úÖ Outros setores dispon√≠veis: {', '.join(show_sectors).upper()}")
        if len(available_sectors) > 5:
            log.info(f"  ‚ûï ... e mais {len(available_sectors) - 5} setores dispon√≠veis")
    
    if unavailable_count > 0:
        log.info(f"  ‚ùå Setores indispon√≠veis: {unavailable_count}")
    
    log.info(f"  üìà Total analisado: {len(all_sector_elements)} setores")
    
    return target_found_and_available

def watch_and_attack(session_cookies: dict) -> bool:
    """
    Vigil√¢ncia otimizada do setor alvo com melhor handling de erros.
    """
    log.info("‚ñ∂Ô∏è FASE 2: Iniciando Vigil√¢ncia Otimizada do Setor")
    log.info(f"üéØ Alvo: {TARGET_SECTOR_SLUG.upper()}")
    target_sector_url = f"{BASE_URL}/jogos/{JOGO_SLUG}/setor/{TARGET_SECTOR_SLUG}/"

    with httpx.Client(
        cookies=session_cookies, 
        headers=HEADERS, 
        timeout=30.0, 
        follow_redirects=True
    ) as client:
        
        for attempt in range(1, MAX_WATCH_ATTEMPTS + 1):
            log.info(f"üîç --- Vigil√¢ncia #{attempt}/{MAX_WATCH_ATTEMPTS} ---")
            
            try:
                # === VERIFICA√á√ÉO DA SESS√ÉO ===
                client.headers['Referer'] = CATEGORIA_URL
                response = client.get(SETORES_URL)
                
                # Verifica se a sess√£o expirou
                if "/auth/login/" in str(response.url):
                    log.error("‚ùå FALHA CR√çTICA: Sess√£o expirou! Necess√°rio novo login.")
                    return False
                
                # Salva HTML para debug (opcional)
                DEBUG_HTML_FILE.write_text(response.text, encoding='utf-8')
                
                # === AN√ÅLISE DOS SETORES ===
                soup = BeautifulSoup(response.text, "html.parser")
                target_available = analyze_and_log_sectors(soup)
                
                # === ATAQUE SE DISPON√çVEL ===
                if target_available:
                    log.info(f"üö® OPORTUNIDADE DETECTADA! Setor '{TARGET_SECTOR_SLUG.upper()}' dispon√≠vel!")
                    log.info("‚ö° Iniciando sequ√™ncia de ataque...")
                    
                    try:
                        # 1. Acessa a p√°gina do setor
                        client.headers['Referer'] = SETORES_URL
                        sector_response = client.get(target_sector_url)
                        sector_response.raise_for_status()
                        
                        log.info("‚úÖ P√°gina do setor acessada")
                        
                        # 2. Extrai CSRF token
                        sector_soup = BeautifulSoup(sector_response.text, "html.parser")
                        csrf_element = sector_soup.find("input", {"name": "csrfmiddlewaretoken"})
                        
                        if not csrf_element:
                            log.error("‚ùå CSRF token n√£o encontrado!")
                            return True  # Encerra para evitar spam
                        
                        csrf_token = csrf_element.get("value")
                        log.info("üîë CSRF token extra√≠do")
                        
                        # 3. Prepara payload para reserva
                        payload = {
                            "csrfmiddlewaretoken": csrf_token,
                            "dependentes": DEPENDENTE_ID
                        }
                        
                        # 4. Executa reserva
                        client.headers['Referer'] = target_sector_url
                        log.info("üéØ Executando reserva...")
                        
                        post_response = client.post(target_sector_url, data=payload)
                        
                        # 5. Verifica resultado
                        if post_response.history:
                            redirect_location = post_response.history[0].headers.get("location", "")
                            if "/ingressos/" in redirect_location:
                                success_url = f"{BASE_URL}{redirect_location}"
                                log.info(f"üéâ SUCESSO TOTAL! RESERVA CONFIRMADA!")
                                log.info(f"üé´ URL da reserva: {success_url}")
                                log.info("üèÜ MISS√ÉO CUMPRIDA! Bot conclu√≠do com √™xito.")
                                return True
                            else:
                                log.warning(f"‚ö†Ô∏è Redirecionamento inesperado: {redirect_location}")
                        
                        # Verifica se est√° na p√°gina de ingressos
                        if "/ingressos/" in post_response.url.path:
                            log.info(f"üéâ SUCESSO! P√°gina de ingressos alcan√ßada!")
                            log.info(f"üé´ URL final: {post_response.url}")
                            return True
                        
                        log.error("‚ùå ATAQUE FALHOU! Oportunidade n√£o convertida.")
                        log.warning("üîÑ Continuando vigil√¢ncia...")
                        
                    except Exception as attack_error:
                        log.error(f"üí• Erro durante ataque: {attack_error}")
                        log.warning("üîÑ Continuando vigil√¢ncia...")
                
                else:
                    # Setor n√£o dispon√≠vel - continua vigil√¢ncia
                    next_interval = random.uniform(WATCH_INTERVAL_MIN, WATCH_INTERVAL_MAX)
                    log.info(f"‚è≥ Pr√≥xima verifica√ß√£o em {next_interval:.1f}s...")
                    time.sleep(next_interval)
                    continue

            except httpx.RequestError as req_error:
                log.error(f"üåê Erro de rede: {req_error}")
                log.info("‚è≥ Aguardando 10s antes de tentar novamente...")
                time.sleep(10)
                continue
                
            except Exception as unexpected_error:
                log.exception(f"üí• Erro inesperado na vigil√¢ncia:")
                time.sleep(5)
                continue
        
    log.error(f"‚ùå Esgotadas as {MAX_WATCH_ATTEMPTS} tentativas de vigil√¢ncia.")
    log.info("‚è∞ Limite de tentativas atingido. Encerrando.")
    return False

def main():
    """Fun√ß√£o principal do bot worker."""
    log.info("üöÄ BOT WORKER INICIADO!")
    log.info("=" * 60)
    log.info(f"üéØ Setor alvo: {TARGET_SECTOR_SLUG.upper()}")
    log.info(f"üéÆ Jogo: {JOGO_SLUG}")
    log.info(f"üë§ Dependente ID: {DEPENDENTE_ID}")
    log.info(f"üîÑ M√°ximo de tentativas: {MAX_WATCH_ATTEMPTS}")
    log.info(f"‚è±Ô∏è Intervalo: {WATCH_INTERVAL_MIN}s - {WATCH_INTERVAL_MAX}s")
    log.info("=" * 60)
    
    attempt_count = 0
    max_login_attempts = 5
    
    while attempt_count < max_login_attempts:
        attempt_count += 1
        log.info(f"üîë Tentativa de autentica√ß√£o #{attempt_count}/{max_login_attempts}")
        
        # Obt√©m sess√£o autenticada
        cookies = get_authenticated_session()
        
        if cookies:
            log.info("‚úÖ Sess√£o autenticada obtida com sucesso!")
            log.info("üîç Iniciando processo de vigil√¢ncia...")
            
            # Executa vigil√¢ncia
            mission_completed = watch_and_attack(cookies)
            
            if mission_completed:
                log.info("üèÅ MISS√ÉO CONCLU√çDA COM SUCESSO! Encerrando worker.")
                break
            else:
                log.warning("‚ö†Ô∏è Vigil√¢ncia finalizada sem sucesso.")
                
                if attempt_count < max_login_attempts:
                    log.info(f"üîÑ Tentando nova autentica√ß√£o em 2 minutos...")
                    time.sleep(120)  # Aguarda 2 minutos antes de tentar novo login
                else:
                    log.error("‚ùå M√°ximo de tentativas de login atingido.")
                    break
        else:
            log.error(f"‚ùå Falha na autentica√ß√£o (tentativa {attempt_count})")
            
            if attempt_count < max_login_attempts:
                wait_time = min(300 * attempt_count, 1800)  # Aumenta o tempo de espera, m√°x 30min
                log.info(f"‚è≥ Aguardando {wait_time//60}min antes da pr√≥xima tentativa...")
                time.sleep(wait_time)
            else:
                log.error("‚ùå M√°ximo de tentativas de autentica√ß√£o atingido.")
                break
    
    log.info("üîö Worker finalizado.")

if __name__ == "__main__":
    try:
        main()
    except KeyboardInterrupt:
        log.info("‚ö†Ô∏è Worker interrompido pelo usu√°rio.")
    except Exception as e:
        log.exception(f"üí• Erro fatal no worker: {e}")
    finally:
        log.info("üëã Bot Worker encerrado.")
